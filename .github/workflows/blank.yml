import cv2

# Read the input image or video frame

image = cv2.imread('input.jpg')

# Convert the image to grayscale

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian blur

blur = cv2.Gaussian Blur(gray, (5, 5), 0)

# Perform edge detection using Canny

edges = cv2.Canny(blur, 50, 150)

height, width = edges.shape mask = np.zeros_like(edges)

# Define a region of interest polygon

polygon = np.array([[(0, height), (width // 2, height // 2), (width, height)]], np.int32)

# Fill the region of interest with white color cv2.fillPoly(mask, polygon, 255)

# Apply the mask masked_edges = cv2.bitwise_and(edges, mask)
lines = cv2.Hough LinesP(masked_edges, 2, np.pi/180, 100, np.array(), minLineLength=40, maxLineGap=5)
x1, y1, x2, y2 = line[0]

cv2.line(image, (x1, y1), (x2, y2), (0, 255, 0), 3)

# Display the final image with lane lines

cv2.imshow('Lane Detection', image)

cv2.waitKey(0)

cv2.destroyAllWindows()

methodology and result:
